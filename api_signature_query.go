/*
openapi for sibyl2 server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)

// SignatureQueryApiService SignatureQueryApi service
type SignatureQueryApiService service

type ApiApiV1SignatureFuncGetRequest struct {
	ctx        context.Context
	ApiService *SignatureQueryApiService
	repo       *string
	rev        *string
	signature  *string
}

// repo
func (r ApiApiV1SignatureFuncGetRequest) Repo(repo string) ApiApiV1SignatureFuncGetRequest {
	r.repo = &repo
	return r
}

// rev
func (r ApiApiV1SignatureFuncGetRequest) Rev(rev string) ApiApiV1SignatureFuncGetRequest {
	r.rev = &rev
	return r
}

// signature
func (r ApiApiV1SignatureFuncGetRequest) Signature(signature string) ApiApiV1SignatureFuncGetRequest {
	r.signature = &signature
	return r
}

func (r ApiApiV1SignatureFuncGetRequest) Execute() (*Sibyl2FunctionWithTag, *http.Response, error) {
	return r.ApiService.ApiV1SignatureFuncGetExecute(r)
}

/*
ApiV1SignatureFuncGet func query

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiApiV1SignatureFuncGetRequest
*/
func (a *SignatureQueryApiService) ApiV1SignatureFuncGet(ctx context.Context) ApiApiV1SignatureFuncGetRequest {
	return ApiApiV1SignatureFuncGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Sibyl2FunctionWithTag
func (a *SignatureQueryApiService) ApiV1SignatureFuncGetExecute(r ApiApiV1SignatureFuncGetRequest) (*Sibyl2FunctionWithTag, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Sibyl2FunctionWithTag
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SignatureQueryApiService.ApiV1SignatureFuncGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/signature/func"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.repo == nil {
		return localVarReturnValue, nil, reportError("repo is required and must be specified")
	}
	if r.rev == nil {
		return localVarReturnValue, nil, reportError("rev is required and must be specified")
	}
	if r.signature == nil {
		return localVarReturnValue, nil, reportError("signature is required and must be specified")
	}

	localVarQueryParams.Add("repo", parameterToString(*r.repo, ""))
	localVarQueryParams.Add("rev", parameterToString(*r.rev, ""))
	localVarQueryParams.Add("signature", parameterToString(*r.signature, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV1SignatureFuncctxChainGetRequest struct {
	ctx        context.Context
	ApiService *SignatureQueryApiService
	repo       *string
	rev        *string
	signature  *string
	depth      *int32
}

// repo
func (r ApiApiV1SignatureFuncctxChainGetRequest) Repo(repo string) ApiApiV1SignatureFuncctxChainGetRequest {
	r.repo = &repo
	return r
}

// rev
func (r ApiApiV1SignatureFuncctxChainGetRequest) Rev(rev string) ApiApiV1SignatureFuncctxChainGetRequest {
	r.rev = &rev
	return r
}

// signature
func (r ApiApiV1SignatureFuncctxChainGetRequest) Signature(signature string) ApiApiV1SignatureFuncctxChainGetRequest {
	r.signature = &signature
	return r
}

// depth
func (r ApiApiV1SignatureFuncctxChainGetRequest) Depth(depth int32) ApiApiV1SignatureFuncctxChainGetRequest {
	r.depth = &depth
	return r
}

func (r ApiApiV1SignatureFuncctxChainGetRequest) Execute() (*ServiceFunctionContextChain, *http.Response, error) {
	return r.ApiService.ApiV1SignatureFuncctxChainGetExecute(r)
}

/*
ApiV1SignatureFuncctxChainGet funcctx chain query

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiApiV1SignatureFuncctxChainGetRequest
*/
func (a *SignatureQueryApiService) ApiV1SignatureFuncctxChainGet(ctx context.Context) ApiApiV1SignatureFuncctxChainGetRequest {
	return ApiApiV1SignatureFuncctxChainGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ServiceFunctionContextChain
func (a *SignatureQueryApiService) ApiV1SignatureFuncctxChainGetExecute(r ApiApiV1SignatureFuncctxChainGetRequest) (*ServiceFunctionContextChain, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServiceFunctionContextChain
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SignatureQueryApiService.ApiV1SignatureFuncctxChainGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/signature/funcctx/chain"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.repo == nil {
		return localVarReturnValue, nil, reportError("repo is required and must be specified")
	}
	if r.rev == nil {
		return localVarReturnValue, nil, reportError("rev is required and must be specified")
	}
	if r.signature == nil {
		return localVarReturnValue, nil, reportError("signature is required and must be specified")
	}
	if r.depth == nil {
		return localVarReturnValue, nil, reportError("depth is required and must be specified")
	}

	localVarQueryParams.Add("repo", parameterToString(*r.repo, ""))
	localVarQueryParams.Add("rev", parameterToString(*r.rev, ""))
	localVarQueryParams.Add("signature", parameterToString(*r.signature, ""))
	localVarQueryParams.Add("depth", parameterToString(*r.depth, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV1SignatureFuncctxGetRequest struct {
	ctx        context.Context
	ApiService *SignatureQueryApiService
	repo       *string
	rev        *string
	signature  *string
}

// repo
func (r ApiApiV1SignatureFuncctxGetRequest) Repo(repo string) ApiApiV1SignatureFuncctxGetRequest {
	r.repo = &repo
	return r
}

// rev
func (r ApiApiV1SignatureFuncctxGetRequest) Rev(rev string) ApiApiV1SignatureFuncctxGetRequest {
	r.rev = &rev
	return r
}

// signature
func (r ApiApiV1SignatureFuncctxGetRequest) Signature(signature string) ApiApiV1SignatureFuncctxGetRequest {
	r.signature = &signature
	return r
}

func (r ApiApiV1SignatureFuncctxGetRequest) Execute() (*Sibyl2FunctionContextSlim, *http.Response, error) {
	return r.ApiService.ApiV1SignatureFuncctxGetExecute(r)
}

/*
ApiV1SignatureFuncctxGet funcctx query

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiApiV1SignatureFuncctxGetRequest
*/
func (a *SignatureQueryApiService) ApiV1SignatureFuncctxGet(ctx context.Context) ApiApiV1SignatureFuncctxGetRequest {
	return ApiApiV1SignatureFuncctxGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Sibyl2FunctionContextSlim
func (a *SignatureQueryApiService) ApiV1SignatureFuncctxGetExecute(r ApiApiV1SignatureFuncctxGetRequest) (*Sibyl2FunctionContextSlim, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Sibyl2FunctionContextSlim
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SignatureQueryApiService.ApiV1SignatureFuncctxGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/signature/funcctx"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.repo == nil {
		return localVarReturnValue, nil, reportError("repo is required and must be specified")
	}
	if r.rev == nil {
		return localVarReturnValue, nil, reportError("rev is required and must be specified")
	}
	if r.signature == nil {
		return localVarReturnValue, nil, reportError("signature is required and must be specified")
	}

	localVarQueryParams.Add("repo", parameterToString(*r.repo, ""))
	localVarQueryParams.Add("rev", parameterToString(*r.rev, ""))
	localVarQueryParams.Add("signature", parameterToString(*r.signature, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV1SignatureFuncctxRchainGetRequest struct {
	ctx        context.Context
	ApiService *SignatureQueryApiService
	repo       *string
	rev        *string
	signature  *string
	depth      *int32
}

// repo
func (r ApiApiV1SignatureFuncctxRchainGetRequest) Repo(repo string) ApiApiV1SignatureFuncctxRchainGetRequest {
	r.repo = &repo
	return r
}

// rev
func (r ApiApiV1SignatureFuncctxRchainGetRequest) Rev(rev string) ApiApiV1SignatureFuncctxRchainGetRequest {
	r.rev = &rev
	return r
}

// signature
func (r ApiApiV1SignatureFuncctxRchainGetRequest) Signature(signature string) ApiApiV1SignatureFuncctxRchainGetRequest {
	r.signature = &signature
	return r
}

// depth
func (r ApiApiV1SignatureFuncctxRchainGetRequest) Depth(depth int32) ApiApiV1SignatureFuncctxRchainGetRequest {
	r.depth = &depth
	return r
}

func (r ApiApiV1SignatureFuncctxRchainGetRequest) Execute() (*ServiceFunctionContextChain, *http.Response, error) {
	return r.ApiService.ApiV1SignatureFuncctxRchainGetExecute(r)
}

/*
ApiV1SignatureFuncctxRchainGet funcctx reverse chain query

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiApiV1SignatureFuncctxRchainGetRequest
*/
func (a *SignatureQueryApiService) ApiV1SignatureFuncctxRchainGet(ctx context.Context) ApiApiV1SignatureFuncctxRchainGetRequest {
	return ApiApiV1SignatureFuncctxRchainGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ServiceFunctionContextChain
func (a *SignatureQueryApiService) ApiV1SignatureFuncctxRchainGetExecute(r ApiApiV1SignatureFuncctxRchainGetRequest) (*ServiceFunctionContextChain, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServiceFunctionContextChain
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SignatureQueryApiService.ApiV1SignatureFuncctxRchainGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/signature/funcctx/rchain"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.repo == nil {
		return localVarReturnValue, nil, reportError("repo is required and must be specified")
	}
	if r.rev == nil {
		return localVarReturnValue, nil, reportError("rev is required and must be specified")
	}
	if r.signature == nil {
		return localVarReturnValue, nil, reportError("signature is required and must be specified")
	}
	if r.depth == nil {
		return localVarReturnValue, nil, reportError("depth is required and must be specified")
	}

	localVarQueryParams.Add("repo", parameterToString(*r.repo, ""))
	localVarQueryParams.Add("rev", parameterToString(*r.rev, ""))
	localVarQueryParams.Add("signature", parameterToString(*r.signature, ""))
	localVarQueryParams.Add("depth", parameterToString(*r.depth, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV1SignatureRegexFuncGetRequest struct {
	ctx        context.Context
	ApiService *SignatureQueryApiService
	repo       *string
	rev        *string
	regex      *string
}

// repo
func (r ApiApiV1SignatureRegexFuncGetRequest) Repo(repo string) ApiApiV1SignatureRegexFuncGetRequest {
	r.repo = &repo
	return r
}

// rev
func (r ApiApiV1SignatureRegexFuncGetRequest) Rev(rev string) ApiApiV1SignatureRegexFuncGetRequest {
	r.rev = &rev
	return r
}

// regex
func (r ApiApiV1SignatureRegexFuncGetRequest) Regex(regex string) ApiApiV1SignatureRegexFuncGetRequest {
	r.regex = &regex
	return r
}

func (r ApiApiV1SignatureRegexFuncGetRequest) Execute() ([]string, *http.Response, error) {
	return r.ApiService.ApiV1SignatureRegexFuncGetExecute(r)
}

/*
ApiV1SignatureRegexFuncGet func query

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiApiV1SignatureRegexFuncGetRequest
*/
func (a *SignatureQueryApiService) ApiV1SignatureRegexFuncGet(ctx context.Context) ApiApiV1SignatureRegexFuncGetRequest {
	return ApiApiV1SignatureRegexFuncGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []string
func (a *SignatureQueryApiService) ApiV1SignatureRegexFuncGetExecute(r ApiApiV1SignatureRegexFuncGetRequest) ([]string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SignatureQueryApiService.ApiV1SignatureRegexFuncGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/signature/regex/func"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.repo == nil {
		return localVarReturnValue, nil, reportError("repo is required and must be specified")
	}
	if r.rev == nil {
		return localVarReturnValue, nil, reportError("rev is required and must be specified")
	}
	if r.regex == nil {
		return localVarReturnValue, nil, reportError("regex is required and must be specified")
	}

	localVarQueryParams.Add("repo", parameterToString(*r.repo, ""))
	localVarQueryParams.Add("rev", parameterToString(*r.rev, ""))
	localVarQueryParams.Add("regex", parameterToString(*r.regex, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
