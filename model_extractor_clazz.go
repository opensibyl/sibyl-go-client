/*
openapi for sibyl2 server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ExtractorClazz struct for ExtractorClazz
type ExtractorClazz struct {
	// which contains language-specific contents
	Extras map[string]interface{} `json:"extras,omitempty"`
	// language
	Lang   *string   `json:"lang,omitempty"`
	Module *string   `json:"module,omitempty"`
	Name   *string   `json:"name,omitempty"`
	Span   *CoreSpan `json:"span,omitempty"`
}

// NewExtractorClazz instantiates a new ExtractorClazz object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtractorClazz() *ExtractorClazz {
	this := ExtractorClazz{}
	return &this
}

// NewExtractorClazzWithDefaults instantiates a new ExtractorClazz object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtractorClazzWithDefaults() *ExtractorClazz {
	this := ExtractorClazz{}
	return &this
}

// GetExtras returns the Extras field value if set, zero value otherwise.
func (o *ExtractorClazz) GetExtras() map[string]interface{} {
	if o == nil || isNil(o.Extras) {
		var ret map[string]interface{}
		return ret
	}
	return o.Extras
}

// GetExtrasOk returns a tuple with the Extras field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtractorClazz) GetExtrasOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Extras) {
		return map[string]interface{}{}, false
	}
	return o.Extras, true
}

// HasExtras returns a boolean if a field has been set.
func (o *ExtractorClazz) HasExtras() bool {
	if o != nil && !isNil(o.Extras) {
		return true
	}

	return false
}

// SetExtras gets a reference to the given map[string]interface{} and assigns it to the Extras field.
func (o *ExtractorClazz) SetExtras(v map[string]interface{}) {
	o.Extras = v
}

// GetLang returns the Lang field value if set, zero value otherwise.
func (o *ExtractorClazz) GetLang() string {
	if o == nil || isNil(o.Lang) {
		var ret string
		return ret
	}
	return *o.Lang
}

// GetLangOk returns a tuple with the Lang field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtractorClazz) GetLangOk() (*string, bool) {
	if o == nil || isNil(o.Lang) {
		return nil, false
	}
	return o.Lang, true
}

// HasLang returns a boolean if a field has been set.
func (o *ExtractorClazz) HasLang() bool {
	if o != nil && !isNil(o.Lang) {
		return true
	}

	return false
}

// SetLang gets a reference to the given string and assigns it to the Lang field.
func (o *ExtractorClazz) SetLang(v string) {
	o.Lang = &v
}

// GetModule returns the Module field value if set, zero value otherwise.
func (o *ExtractorClazz) GetModule() string {
	if o == nil || isNil(o.Module) {
		var ret string
		return ret
	}
	return *o.Module
}

// GetModuleOk returns a tuple with the Module field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtractorClazz) GetModuleOk() (*string, bool) {
	if o == nil || isNil(o.Module) {
		return nil, false
	}
	return o.Module, true
}

// HasModule returns a boolean if a field has been set.
func (o *ExtractorClazz) HasModule() bool {
	if o != nil && !isNil(o.Module) {
		return true
	}

	return false
}

// SetModule gets a reference to the given string and assigns it to the Module field.
func (o *ExtractorClazz) SetModule(v string) {
	o.Module = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ExtractorClazz) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtractorClazz) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ExtractorClazz) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ExtractorClazz) SetName(v string) {
	o.Name = &v
}

// GetSpan returns the Span field value if set, zero value otherwise.
func (o *ExtractorClazz) GetSpan() CoreSpan {
	if o == nil || isNil(o.Span) {
		var ret CoreSpan
		return ret
	}
	return *o.Span
}

// GetSpanOk returns a tuple with the Span field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtractorClazz) GetSpanOk() (*CoreSpan, bool) {
	if o == nil || isNil(o.Span) {
		return nil, false
	}
	return o.Span, true
}

// HasSpan returns a boolean if a field has been set.
func (o *ExtractorClazz) HasSpan() bool {
	if o != nil && !isNil(o.Span) {
		return true
	}

	return false
}

// SetSpan gets a reference to the given CoreSpan and assigns it to the Span field.
func (o *ExtractorClazz) SetSpan(v CoreSpan) {
	o.Span = &v
}

func (o ExtractorClazz) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Extras) {
		toSerialize["extras"] = o.Extras
	}
	if !isNil(o.Lang) {
		toSerialize["lang"] = o.Lang
	}
	if !isNil(o.Module) {
		toSerialize["module"] = o.Module
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Span) {
		toSerialize["span"] = o.Span
	}
	return json.Marshal(toSerialize)
}

type NullableExtractorClazz struct {
	value *ExtractorClazz
	isSet bool
}

func (v NullableExtractorClazz) Get() *ExtractorClazz {
	return v.value
}

func (v *NullableExtractorClazz) Set(val *ExtractorClazz) {
	v.value = val
	v.isSet = true
}

func (v NullableExtractorClazz) IsSet() bool {
	return v.isSet
}

func (v *NullableExtractorClazz) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtractorClazz(val *ExtractorClazz) *NullableExtractorClazz {
	return &NullableExtractorClazz{value: val, isSet: true}
}

func (v NullableExtractorClazz) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtractorClazz) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
