/*
openapi for sibyl2 server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CoreSpan struct for CoreSpan
type CoreSpan struct {
	End *CorePoint `json:"end,omitempty"`
	Start *CorePoint `json:"start,omitempty"`
}

// NewCoreSpan instantiates a new CoreSpan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreSpan() *CoreSpan {
	this := CoreSpan{}
	return &this
}

// NewCoreSpanWithDefaults instantiates a new CoreSpan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreSpanWithDefaults() *CoreSpan {
	this := CoreSpan{}
	return &this
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *CoreSpan) GetEnd() CorePoint {
	if o == nil || isNil(o.End) {
		var ret CorePoint
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreSpan) GetEndOk() (*CorePoint, bool) {
	if o == nil || isNil(o.End) {
    return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *CoreSpan) HasEnd() bool {
	if o != nil && !isNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given CorePoint and assigns it to the End field.
func (o *CoreSpan) SetEnd(v CorePoint) {
	o.End = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *CoreSpan) GetStart() CorePoint {
	if o == nil || isNil(o.Start) {
		var ret CorePoint
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreSpan) GetStartOk() (*CorePoint, bool) {
	if o == nil || isNil(o.Start) {
    return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *CoreSpan) HasStart() bool {
	if o != nil && !isNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given CorePoint and assigns it to the Start field.
func (o *CoreSpan) SetStart(v CorePoint) {
	o.Start = &v
}

func (o CoreSpan) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.End) {
		toSerialize["end"] = o.End
	}
	if !isNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	return json.Marshal(toSerialize)
}

type NullableCoreSpan struct {
	value *CoreSpan
	isSet bool
}

func (v NullableCoreSpan) Get() *CoreSpan {
	return v.value
}

func (v *NullableCoreSpan) Set(val *CoreSpan) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreSpan) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreSpan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreSpan(val *CoreSpan) *NullableCoreSpan {
	return &NullableCoreSpan{value: val, isSet: true}
}

func (v NullableCoreSpan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreSpan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


