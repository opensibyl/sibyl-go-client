/*
openapi for sibyl2 server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ServiceContextTree struct for ServiceContextTree
type ServiceContextTree struct {
	Children []ServiceContextTree `json:"children,omitempty"`
	Content  *string              `json:"content,omitempty"`
}

// NewServiceContextTree instantiates a new ServiceContextTree object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceContextTree() *ServiceContextTree {
	this := ServiceContextTree{}
	return &this
}

// NewServiceContextTreeWithDefaults instantiates a new ServiceContextTree object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceContextTreeWithDefaults() *ServiceContextTree {
	this := ServiceContextTree{}
	return &this
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *ServiceContextTree) GetChildren() []ServiceContextTree {
	if o == nil || isNil(o.Children) {
		var ret []ServiceContextTree
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceContextTree) GetChildrenOk() ([]ServiceContextTree, bool) {
	if o == nil || isNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *ServiceContextTree) HasChildren() bool {
	if o != nil && !isNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []ServiceContextTree and assigns it to the Children field.
func (o *ServiceContextTree) SetChildren(v []ServiceContextTree) {
	o.Children = v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *ServiceContextTree) GetContent() string {
	if o == nil || isNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceContextTree) GetContentOk() (*string, bool) {
	if o == nil || isNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *ServiceContextTree) HasContent() bool {
	if o != nil && !isNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *ServiceContextTree) SetContent(v string) {
	o.Content = &v
}

func (o ServiceContextTree) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	if !isNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	return json.Marshal(toSerialize)
}

type NullableServiceContextTree struct {
	value *ServiceContextTree
	isSet bool
}

func (v NullableServiceContextTree) Get() *ServiceContextTree {
	return v.value
}

func (v *NullableServiceContextTree) Set(val *ServiceContextTree) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceContextTree) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceContextTree) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceContextTree(val *ServiceContextTree) *NullableServiceContextTree {
	return &NullableServiceContextTree{value: val, isSet: true}
}

func (v NullableServiceContextTree) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceContextTree) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
