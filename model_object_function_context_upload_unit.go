/*
openapi for sibyl2 server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ObjectFunctionContextUploadUnit struct for ObjectFunctionContextUploadUnit
type ObjectFunctionContextUploadUnit struct {
	FunctionContext []Sibyl2FunctionContext `json:"functionContext,omitempty"`
	Workspace       *ObjectWorkspaceConfig  `json:"workspace,omitempty"`
}

// NewObjectFunctionContextUploadUnit instantiates a new ObjectFunctionContextUploadUnit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectFunctionContextUploadUnit() *ObjectFunctionContextUploadUnit {
	this := ObjectFunctionContextUploadUnit{}
	return &this
}

// NewObjectFunctionContextUploadUnitWithDefaults instantiates a new ObjectFunctionContextUploadUnit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectFunctionContextUploadUnitWithDefaults() *ObjectFunctionContextUploadUnit {
	this := ObjectFunctionContextUploadUnit{}
	return &this
}

// GetFunctionContext returns the FunctionContext field value if set, zero value otherwise.
func (o *ObjectFunctionContextUploadUnit) GetFunctionContext() []Sibyl2FunctionContext {
	if o == nil || isNil(o.FunctionContext) {
		var ret []Sibyl2FunctionContext
		return ret
	}
	return o.FunctionContext
}

// GetFunctionContextOk returns a tuple with the FunctionContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectFunctionContextUploadUnit) GetFunctionContextOk() ([]Sibyl2FunctionContext, bool) {
	if o == nil || isNil(o.FunctionContext) {
		return nil, false
	}
	return o.FunctionContext, true
}

// HasFunctionContext returns a boolean if a field has been set.
func (o *ObjectFunctionContextUploadUnit) HasFunctionContext() bool {
	if o != nil && !isNil(o.FunctionContext) {
		return true
	}

	return false
}

// SetFunctionContext gets a reference to the given []Sibyl2FunctionContext and assigns it to the FunctionContext field.
func (o *ObjectFunctionContextUploadUnit) SetFunctionContext(v []Sibyl2FunctionContext) {
	o.FunctionContext = v
}

// GetWorkspace returns the Workspace field value if set, zero value otherwise.
func (o *ObjectFunctionContextUploadUnit) GetWorkspace() ObjectWorkspaceConfig {
	if o == nil || isNil(o.Workspace) {
		var ret ObjectWorkspaceConfig
		return ret
	}
	return *o.Workspace
}

// GetWorkspaceOk returns a tuple with the Workspace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectFunctionContextUploadUnit) GetWorkspaceOk() (*ObjectWorkspaceConfig, bool) {
	if o == nil || isNil(o.Workspace) {
		return nil, false
	}
	return o.Workspace, true
}

// HasWorkspace returns a boolean if a field has been set.
func (o *ObjectFunctionContextUploadUnit) HasWorkspace() bool {
	if o != nil && !isNil(o.Workspace) {
		return true
	}

	return false
}

// SetWorkspace gets a reference to the given ObjectWorkspaceConfig and assigns it to the Workspace field.
func (o *ObjectFunctionContextUploadUnit) SetWorkspace(v ObjectWorkspaceConfig) {
	o.Workspace = &v
}

func (o ObjectFunctionContextUploadUnit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.FunctionContext) {
		toSerialize["functionContext"] = o.FunctionContext
	}
	if !isNil(o.Workspace) {
		toSerialize["workspace"] = o.Workspace
	}
	return json.Marshal(toSerialize)
}

type NullableObjectFunctionContextUploadUnit struct {
	value *ObjectFunctionContextUploadUnit
	isSet bool
}

func (v NullableObjectFunctionContextUploadUnit) Get() *ObjectFunctionContextUploadUnit {
	return v.value
}

func (v *NullableObjectFunctionContextUploadUnit) Set(val *ObjectFunctionContextUploadUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectFunctionContextUploadUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectFunctionContextUploadUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectFunctionContextUploadUnit(val *ObjectFunctionContextUploadUnit) *NullableObjectFunctionContextUploadUnit {
	return &NullableObjectFunctionContextUploadUnit{value: val, isSet: true}
}

func (v NullableObjectFunctionContextUploadUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectFunctionContextUploadUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
