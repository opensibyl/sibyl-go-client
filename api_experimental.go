/*
openapi for sibyl2 server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)

// EXPERIMENTALApiService EXPERIMENTALApi service
type EXPERIMENTALApiService service

type ApiApiV1ClazzWithRegexGetRequest struct {
	ctx        context.Context
	ApiService *EXPERIMENTALApiService
	repo       *string
	rev        *string
	field      *string
	regex      *string
}

// repo
func (r ApiApiV1ClazzWithRegexGetRequest) Repo(repo string) ApiApiV1ClazzWithRegexGetRequest {
	r.repo = &repo
	return r
}

// rev
func (r ApiApiV1ClazzWithRegexGetRequest) Rev(rev string) ApiApiV1ClazzWithRegexGetRequest {
	r.rev = &rev
	return r
}

// field
func (r ApiApiV1ClazzWithRegexGetRequest) Field(field string) ApiApiV1ClazzWithRegexGetRequest {
	r.field = &field
	return r
}

// regex
func (r ApiApiV1ClazzWithRegexGetRequest) Regex(regex string) ApiApiV1ClazzWithRegexGetRequest {
	r.regex = &regex
	return r
}

func (r ApiApiV1ClazzWithRegexGetRequest) Execute() ([]Sibyl2ClazzWithPath, *http.Response, error) {
	return r.ApiService.ApiV1ClazzWithRegexGetExecute(r)
}

/*
ApiV1ClazzWithRegexGet clazz query

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiApiV1ClazzWithRegexGetRequest
*/
func (a *EXPERIMENTALApiService) ApiV1ClazzWithRegexGet(ctx context.Context) ApiApiV1ClazzWithRegexGetRequest {
	return ApiApiV1ClazzWithRegexGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Sibyl2ClazzWithPath
func (a *EXPERIMENTALApiService) ApiV1ClazzWithRegexGetExecute(r ApiApiV1ClazzWithRegexGetRequest) ([]Sibyl2ClazzWithPath, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Sibyl2ClazzWithPath
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EXPERIMENTALApiService.ApiV1ClazzWithRegexGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/clazz/with/regex"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.repo == nil {
		return localVarReturnValue, nil, reportError("repo is required and must be specified")
	}
	if r.rev == nil {
		return localVarReturnValue, nil, reportError("rev is required and must be specified")
	}
	if r.field == nil {
		return localVarReturnValue, nil, reportError("field is required and must be specified")
	}
	if r.regex == nil {
		return localVarReturnValue, nil, reportError("regex is required and must be specified")
	}

	localVarQueryParams.Add("repo", parameterToString(*r.repo, ""))
	localVarQueryParams.Add("rev", parameterToString(*r.rev, ""))
	localVarQueryParams.Add("field", parameterToString(*r.field, ""))
	localVarQueryParams.Add("regex", parameterToString(*r.regex, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV1FuncSignatureGetRequest struct {
	ctx        context.Context
	ApiService *EXPERIMENTALApiService
	repo       *string
	rev        *string
	regex      *string
}

// repo
func (r ApiApiV1FuncSignatureGetRequest) Repo(repo string) ApiApiV1FuncSignatureGetRequest {
	r.repo = &repo
	return r
}

// rev
func (r ApiApiV1FuncSignatureGetRequest) Rev(rev string) ApiApiV1FuncSignatureGetRequest {
	r.rev = &rev
	return r
}

// regex
func (r ApiApiV1FuncSignatureGetRequest) Regex(regex string) ApiApiV1FuncSignatureGetRequest {
	r.regex = &regex
	return r
}

func (r ApiApiV1FuncSignatureGetRequest) Execute() ([]string, *http.Response, error) {
	return r.ApiService.ApiV1FuncSignatureGetExecute(r)
}

/*
ApiV1FuncSignatureGet func query

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiApiV1FuncSignatureGetRequest
*/
func (a *EXPERIMENTALApiService) ApiV1FuncSignatureGet(ctx context.Context) ApiApiV1FuncSignatureGetRequest {
	return ApiApiV1FuncSignatureGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []string
func (a *EXPERIMENTALApiService) ApiV1FuncSignatureGetExecute(r ApiApiV1FuncSignatureGetRequest) ([]string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EXPERIMENTALApiService.ApiV1FuncSignatureGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/func/signature"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.repo == nil {
		return localVarReturnValue, nil, reportError("repo is required and must be specified")
	}
	if r.rev == nil {
		return localVarReturnValue, nil, reportError("rev is required and must be specified")
	}
	if r.regex == nil {
		return localVarReturnValue, nil, reportError("regex is required and must be specified")
	}

	localVarQueryParams.Add("repo", parameterToString(*r.repo, ""))
	localVarQueryParams.Add("rev", parameterToString(*r.rev, ""))
	localVarQueryParams.Add("regex", parameterToString(*r.regex, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV1FuncWithRegexGetRequest struct {
	ctx        context.Context
	ApiService *EXPERIMENTALApiService
	repo       *string
	rev        *string
	field      *string
	regex      *string
}

// repo
func (r ApiApiV1FuncWithRegexGetRequest) Repo(repo string) ApiApiV1FuncWithRegexGetRequest {
	r.repo = &repo
	return r
}

// rev
func (r ApiApiV1FuncWithRegexGetRequest) Rev(rev string) ApiApiV1FuncWithRegexGetRequest {
	r.rev = &rev
	return r
}

// field
func (r ApiApiV1FuncWithRegexGetRequest) Field(field string) ApiApiV1FuncWithRegexGetRequest {
	r.field = &field
	return r
}

// regex
func (r ApiApiV1FuncWithRegexGetRequest) Regex(regex string) ApiApiV1FuncWithRegexGetRequest {
	r.regex = &regex
	return r
}

func (r ApiApiV1FuncWithRegexGetRequest) Execute() ([]Sibyl2FunctionWithPath, *http.Response, error) {
	return r.ApiService.ApiV1FuncWithRegexGetExecute(r)
}

/*
ApiV1FuncWithRegexGet func query

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiApiV1FuncWithRegexGetRequest
*/
func (a *EXPERIMENTALApiService) ApiV1FuncWithRegexGet(ctx context.Context) ApiApiV1FuncWithRegexGetRequest {
	return ApiApiV1FuncWithRegexGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Sibyl2FunctionWithPath
func (a *EXPERIMENTALApiService) ApiV1FuncWithRegexGetExecute(r ApiApiV1FuncWithRegexGetRequest) ([]Sibyl2FunctionWithPath, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Sibyl2FunctionWithPath
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EXPERIMENTALApiService.ApiV1FuncWithRegexGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/func/with/regex"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.repo == nil {
		return localVarReturnValue, nil, reportError("repo is required and must be specified")
	}
	if r.rev == nil {
		return localVarReturnValue, nil, reportError("rev is required and must be specified")
	}
	if r.field == nil {
		return localVarReturnValue, nil, reportError("field is required and must be specified")
	}
	if r.regex == nil {
		return localVarReturnValue, nil, reportError("regex is required and must be specified")
	}

	localVarQueryParams.Add("repo", parameterToString(*r.repo, ""))
	localVarQueryParams.Add("rev", parameterToString(*r.rev, ""))
	localVarQueryParams.Add("field", parameterToString(*r.field, ""))
	localVarQueryParams.Add("regex", parameterToString(*r.regex, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV1FuncWithSignatureGetRequest struct {
	ctx        context.Context
	ApiService *EXPERIMENTALApiService
	repo       *string
	rev        *string
	signature  *string
}

// repo
func (r ApiApiV1FuncWithSignatureGetRequest) Repo(repo string) ApiApiV1FuncWithSignatureGetRequest {
	r.repo = &repo
	return r
}

// rev
func (r ApiApiV1FuncWithSignatureGetRequest) Rev(rev string) ApiApiV1FuncWithSignatureGetRequest {
	r.rev = &rev
	return r
}

// signature
func (r ApiApiV1FuncWithSignatureGetRequest) Signature(signature string) ApiApiV1FuncWithSignatureGetRequest {
	r.signature = &signature
	return r
}

func (r ApiApiV1FuncWithSignatureGetRequest) Execute() (*Sibyl2FunctionWithPath, *http.Response, error) {
	return r.ApiService.ApiV1FuncWithSignatureGetExecute(r)
}

/*
ApiV1FuncWithSignatureGet func query

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiApiV1FuncWithSignatureGetRequest
*/
func (a *EXPERIMENTALApiService) ApiV1FuncWithSignatureGet(ctx context.Context) ApiApiV1FuncWithSignatureGetRequest {
	return ApiApiV1FuncWithSignatureGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Sibyl2FunctionWithPath
func (a *EXPERIMENTALApiService) ApiV1FuncWithSignatureGetExecute(r ApiApiV1FuncWithSignatureGetRequest) (*Sibyl2FunctionWithPath, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Sibyl2FunctionWithPath
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EXPERIMENTALApiService.ApiV1FuncWithSignatureGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/func/with/signature"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.repo == nil {
		return localVarReturnValue, nil, reportError("repo is required and must be specified")
	}
	if r.rev == nil {
		return localVarReturnValue, nil, reportError("rev is required and must be specified")
	}
	if r.signature == nil {
		return localVarReturnValue, nil, reportError("signature is required and must be specified")
	}

	localVarQueryParams.Add("repo", parameterToString(*r.repo, ""))
	localVarQueryParams.Add("rev", parameterToString(*r.rev, ""))
	localVarQueryParams.Add("signature", parameterToString(*r.signature, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV1FuncctxWithRegexGetRequest struct {
	ctx        context.Context
	ApiService *EXPERIMENTALApiService
	repo       *string
	rev        *string
	field      *string
	regex      *string
}

// repo
func (r ApiApiV1FuncctxWithRegexGetRequest) Repo(repo string) ApiApiV1FuncctxWithRegexGetRequest {
	r.repo = &repo
	return r
}

// rev
func (r ApiApiV1FuncctxWithRegexGetRequest) Rev(rev string) ApiApiV1FuncctxWithRegexGetRequest {
	r.rev = &rev
	return r
}

// field
func (r ApiApiV1FuncctxWithRegexGetRequest) Field(field string) ApiApiV1FuncctxWithRegexGetRequest {
	r.field = &field
	return r
}

// regex
func (r ApiApiV1FuncctxWithRegexGetRequest) Regex(regex string) ApiApiV1FuncctxWithRegexGetRequest {
	r.regex = &regex
	return r
}

func (r ApiApiV1FuncctxWithRegexGetRequest) Execute() ([]Sibyl2FunctionContext, *http.Response, error) {
	return r.ApiService.ApiV1FuncctxWithRegexGetExecute(r)
}

/*
ApiV1FuncctxWithRegexGet func ctx query

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiApiV1FuncctxWithRegexGetRequest
*/
func (a *EXPERIMENTALApiService) ApiV1FuncctxWithRegexGet(ctx context.Context) ApiApiV1FuncctxWithRegexGetRequest {
	return ApiApiV1FuncctxWithRegexGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Sibyl2FunctionContext
func (a *EXPERIMENTALApiService) ApiV1FuncctxWithRegexGetExecute(r ApiApiV1FuncctxWithRegexGetRequest) ([]Sibyl2FunctionContext, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Sibyl2FunctionContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EXPERIMENTALApiService.ApiV1FuncctxWithRegexGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/funcctx/with/regex"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.repo == nil {
		return localVarReturnValue, nil, reportError("repo is required and must be specified")
	}
	if r.rev == nil {
		return localVarReturnValue, nil, reportError("rev is required and must be specified")
	}
	if r.field == nil {
		return localVarReturnValue, nil, reportError("field is required and must be specified")
	}
	if r.regex == nil {
		return localVarReturnValue, nil, reportError("regex is required and must be specified")
	}

	localVarQueryParams.Add("repo", parameterToString(*r.repo, ""))
	localVarQueryParams.Add("rev", parameterToString(*r.rev, ""))
	localVarQueryParams.Add("field", parameterToString(*r.field, ""))
	localVarQueryParams.Add("regex", parameterToString(*r.regex, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
