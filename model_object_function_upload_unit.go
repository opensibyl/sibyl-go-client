/*
openapi for sibyl2 server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ObjectFunctionUploadUnit struct for ObjectFunctionUploadUnit
type ObjectFunctionUploadUnit struct {
	FuncResult *ExtractorFunctionFileResult `json:"funcResult,omitempty"`
	Workspace  *ObjectWorkspaceConfig       `json:"workspace,omitempty"`
}

// NewObjectFunctionUploadUnit instantiates a new ObjectFunctionUploadUnit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectFunctionUploadUnit() *ObjectFunctionUploadUnit {
	this := ObjectFunctionUploadUnit{}
	return &this
}

// NewObjectFunctionUploadUnitWithDefaults instantiates a new ObjectFunctionUploadUnit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectFunctionUploadUnitWithDefaults() *ObjectFunctionUploadUnit {
	this := ObjectFunctionUploadUnit{}
	return &this
}

// GetFuncResult returns the FuncResult field value if set, zero value otherwise.
func (o *ObjectFunctionUploadUnit) GetFuncResult() ExtractorFunctionFileResult {
	if o == nil || isNil(o.FuncResult) {
		var ret ExtractorFunctionFileResult
		return ret
	}
	return *o.FuncResult
}

// GetFuncResultOk returns a tuple with the FuncResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectFunctionUploadUnit) GetFuncResultOk() (*ExtractorFunctionFileResult, bool) {
	if o == nil || isNil(o.FuncResult) {
		return nil, false
	}
	return o.FuncResult, true
}

// HasFuncResult returns a boolean if a field has been set.
func (o *ObjectFunctionUploadUnit) HasFuncResult() bool {
	if o != nil && !isNil(o.FuncResult) {
		return true
	}

	return false
}

// SetFuncResult gets a reference to the given ExtractorFunctionFileResult and assigns it to the FuncResult field.
func (o *ObjectFunctionUploadUnit) SetFuncResult(v ExtractorFunctionFileResult) {
	o.FuncResult = &v
}

// GetWorkspace returns the Workspace field value if set, zero value otherwise.
func (o *ObjectFunctionUploadUnit) GetWorkspace() ObjectWorkspaceConfig {
	if o == nil || isNil(o.Workspace) {
		var ret ObjectWorkspaceConfig
		return ret
	}
	return *o.Workspace
}

// GetWorkspaceOk returns a tuple with the Workspace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectFunctionUploadUnit) GetWorkspaceOk() (*ObjectWorkspaceConfig, bool) {
	if o == nil || isNil(o.Workspace) {
		return nil, false
	}
	return o.Workspace, true
}

// HasWorkspace returns a boolean if a field has been set.
func (o *ObjectFunctionUploadUnit) HasWorkspace() bool {
	if o != nil && !isNil(o.Workspace) {
		return true
	}

	return false
}

// SetWorkspace gets a reference to the given ObjectWorkspaceConfig and assigns it to the Workspace field.
func (o *ObjectFunctionUploadUnit) SetWorkspace(v ObjectWorkspaceConfig) {
	o.Workspace = &v
}

func (o ObjectFunctionUploadUnit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.FuncResult) {
		toSerialize["funcResult"] = o.FuncResult
	}
	if !isNil(o.Workspace) {
		toSerialize["workspace"] = o.Workspace
	}
	return json.Marshal(toSerialize)
}

type NullableObjectFunctionUploadUnit struct {
	value *ObjectFunctionUploadUnit
	isSet bool
}

func (v NullableObjectFunctionUploadUnit) Get() *ObjectFunctionUploadUnit {
	return v.value
}

func (v *NullableObjectFunctionUploadUnit) Set(val *ObjectFunctionUploadUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectFunctionUploadUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectFunctionUploadUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectFunctionUploadUnit(val *ObjectFunctionUploadUnit) *NullableObjectFunctionUploadUnit {
	return &NullableObjectFunctionUploadUnit{value: val, isSet: true}
}

func (v NullableObjectFunctionUploadUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectFunctionUploadUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
